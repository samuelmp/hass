# !toggle word-wrap

#################################################
#                                               #
#                  MAIN CSS                     #
#                                               #
#################################################

icon_main:
  styles:
    icon:
      - display: flex
  extra_styles: |
    .ha-card.button-card-main{
       padding: 0 !important;
    }
    .ha-card {
      box-shadow: 0 0 28px rgba(255, 255, 255, .7);
    }
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {

      /* Retina-specific screens */
      .ha-card.button-card-main{
          padding: 0 !important;
       }

    }

#################################################
#                                               #
#                    CIRCLE                     #
#                                               #
#################################################

circle:
  custom_fields:
    circle: >
      [[[
        if (entity.state === 'on') {
          const input = variables.circle_input;
          const radius = 23;
          const circumference = radius * 2 * Math.PI;
          return `
            <svg width="100%" viewBox="0 0 50 50">
              <style>
                circle {
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - input / 100 * circumference};
                }
                tspan {
                  font-size: 10px;
                }
              </style>
              <circle cx="25" cy="25" r="${radius}" stroke="${variables.circle_color}" stroke-width="2" fill="none" />
            </svg>
          `;
        }
      ]]]
  styles:
    custom_fields:
      circle:
        - top: 0%
        - left: 0%
        - width: 3.4vw
        - position: absolute
        - letter-spacing: 0.03vw

#################################################
#                                               #
#                   LIGHT                      #
#                                               #
#################################################

light:
  template:
    - icon_main
    #- circle
  show_state: false
  show_icon: true
  show_name: false
  show_label: false
  size: 55%
  color: auto
  color_type: icon
  tap_action:
    action: toggle
    # haptic: light

  styles:
    card:
      - width: 3.4vw
      - height: 3.4vw
      - borderRadius: 10vw
      - background-color: rgba(0, 0, 0, .1)
      - box-shadow: >
          [[[ return (entity.state === 'on' || entity.state === 'home') ? `0 0 2vw rgba(255, 255, 255, ${Math.max(entity.attributes.brightness/255, .25)})` : '0 0 1vw rgba(255, 255, 255, 0.1)'; ]]]
      - --icon-primary-color: >
          [[[ return (entity.state === 'on' || entity.state === 'home') ? `#ffe03f` : 'white'; ]]]

  variables:
    circle_input: >
      [[[ return Math.round(entity.attributes.brightness / 2.54); ]]]
    # circle_color: var(--button-card-light-color)
    circle_color: rgba(0, 0, 0, .1)

    #################################################
#                                               #
#                Group Light                    #
#                                               #
#################################################

light_group:
  icon: mdi:google-circles-communities
  template:
    - icon_main
    - circle
  show_state: false
  show_icon: true
  show_name: false
  show_label: false
  color_type: icon
  color: rgb(255, 159, 0)
  color_off: rgb(255, 255, 255)
  size: 55%
  tap_action:
    action: toggle
    haptic: light
  styles:
    card:
      - width: 4vw
      - height: 4vw
      - borderRadius: 10vw
      - background-color: >
          [[[ return (entity.state === 'on' ) ? 'rgba(255, 255, 255, 1.0)' : 'rgba(115, 115, 115, 0.6)'; ]]]
  variables:
    circle_input: >
      [[[ return Math.round(entity.attributes.brightness / 2.54); ]]]
  hold_action:
    action: fire-dom-event
    browser_mod:
      command: popup
      style:
        $: |
          s.popup-inner{
            padding: 15px 0 30px 0;
          }
          .mdc-dialog .mdc-dialog__container {
          }
          .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
            border-radius: 2vw;
          }
          .mdc-dialog .mdc-dialog__scrim {
              backdrop-filter: blur(10px);
          }
          ha-svg-icon {
              margin-top:-7px;
          }
        .: |
          :host {
            --mdc-dialog-scrim-color: rgba(0,0,0,0.5);
          }
          mwc-icon-button {
            color: #FFF;
          }
      title: >
        [[[ return entity.attributes.friendly_name ]]]
      card:
        type: entities
        entities:
          - type: custom:light-popup-card
            entity: >
              [[[ return entity.entity_id ]]]
            icon: none
            hideIcon: true
            fullscreen: false
            brightnessWidth: 130px
            brightnessHeight: 360px
            borderRadius: 1.7em
            sliderColor: "#c7c7c7"
            sliderTrackColor: rgba(25, 25, 25, 0.9)

#################################################
#                                               #
#                White Light                    #
#                                               #
#################################################

light_white:
  template:
    - icon_main
    - circle
  show_state: false
  show_icon: true
  show_name: false
  show_label: false
  size: 55%
  color_type: icon
  color: rgb(255, 159, 0)
  color_off: rgb(255, 255, 255)
  tap_action:
    action: toggle
    haptic: light
  styles:
    card:
      - width: 4vw
      - height: 4vw
      - borderRadius: 10vw
      - background-color: >
          [[[ return (entity.state === 'on' || entity.state === 'home') ? 'rgba(255, 255, 255, 1.0)' : 'rgba(115, 115, 115, 0.6)'; ]]]
  variables:
    circle_input: >
      [[[ return Math.round(entity.attributes.brightness / 2.54); ]]]
  hold_action:
    action: fire-dom-event
    browser_mod:
      command: popup
      style:
        $: |
          s.popup-inner{
            padding: 15px 0 30px 0;
          }
          .mdc-dialog .mdc-dialog__container {
          }
          .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
            border-radius: 2vw;
          }
          .mdc-dialog .mdc-dialog__scrim {
              backdrop-filter: blur(10px);
          }
          ha-svg-icon {
              margin-top:-7px;
          }
        .: |
          :host {
            --mdc-dialog-scrim-color: rgba(0,0,0,0.5);
          }
          mwc-icon-button {
            color: #FFF;
          }
      title: >
        [[[ return entity.attributes.friendly_name ]]]
      card:
        type: entities
        entities:
          - type: custom:light-popup-card
            entity: >
              [[[ return entity.entity_id ]]]
            icon: none
            hideIcon: true
            fullscreen: false
            brightnessWidth: 130px
            brightnessHeight: 360px
            borderRadius: 1.7em
            sliderColor: "#c7c7c7"
            sliderTrackColor: rgba(25, 25, 25, 0.9)
