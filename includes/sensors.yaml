- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "date_time_utc"
    - "date_time_iso"
    - "time_date"
    - "time_utc"

- platform: template
  sensors:
    nightstate_100:
      friendly_name: Night State
      value_template: "{% if is_state('sun.sun', 'below_horizon') %}100{% else %}0{% endif %}"
    daystate_100:
      friendly_name: Day State
      value_template: "{% if is_state('sun.sun', 'below_horizon') %}0{% else %}100{% endif %}"

    ## to get the current view of my tablet for UI automations
    tablet_view:
      value_template: "{{ states.sensor.tablet.attributes['path'] | default('/lovelace-full/0') }}"
      friendly_name: Tablet View

    ## Calculates daylight brightness out of 100%
    ## {%- set cloud_coverage = states('sensor.dark_sky_cloud_coverage') | float %}
    sunlight_pct:
      value_template: >-
        {%- set elevation = state_attr('sun.sun','elevation') | float %}
        {%- set cloud_coverage = 1 | float %}
        {%- set cloud_factor = (1 - (0.75 * ( cloud_coverage / 100) ** 3 )) %}
        {%- set min_elevation = -6 %}
        {%- set max_elevation = 90 %}
        {%- set adjusted_elevation = elevation - min_elevation %}
        {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
        {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
        {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
        {%- set adjusted_elevation = adjusted_elevation %}
        {%- set adjusted_elevation = adjusted_elevation * 100 %}
        {%- set brightness = adjusted_elevation * cloud_factor %}
        {{ brightness | round }}
      unit_of_measurement: "%"
      device_class: "illuminance"

    ## Daylight brightness converted to opacity for CSS
    sunlight_opacity:
      value_template: >-
        {%- set sunpct = states('sensor.sunlight_pct') | float %}
        {%- set opacity = sunpct / 100 | float %}
        {{ opacity }}

    ## Converts time and date into sentence for UI
    day:
      value_template: >
        {% set days = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'] %}
        {{ days[now().weekday()] }}

    month:
      value_template: >
        {% set months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'] %}
        {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
        {{ months[now().month-1] }}

    date_string:
      friendly_name: "Full Date 1"
      value_template: "{{ states('sensor.day') }}, {{ states('sensor.month') }} {{ now().year }}"

    ## Vaccuum templates, for showing attributes as sensors, etc.

    vacuum_status:
      friendly_name: "Vacuum - Status"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.status }}"

    vacuum_battery:
      friendly_name: "Vacuum - Battery"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.battery_level }}"
      device_class: battery
      unit_of_measurement: "%"

    vacuum_fan:
      friendly_name: "Vacuum - Fan Speed"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.fan_speed }}"

    vacuum_battery_icon:
      friendly_name: "Vacuum - Battery Icon"
      icon_template: "{{ states.vacuum.roborock_q5_pro.attributes.battery_icon }}"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.battery_icon }}"

    vacuum_cleaning_time:
      friendly_name: "Vacuum - Cleaning Time"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.cleaning_time }}"

    vacuum_cleaned_area:
      friendly_name: "Vacuum - Cleaned Area"
      value_template: "{{ states.vacuum.roborock_q5_pro.attributes.cleaned_area }}"
    home_assistant_installed_version:
      friendly_name: "Versión Instalada"
      value_template: "{{ states.update.home_assistant_core_update.attributes.installed_version }}"
    home_assistant_latest_version:
      friendly_name: "Última versión"
      value_template: "{{ states.update.home_assistant_core_update.attributes.latest_version }}"
    count_lights_on:
      friendly_name: "Total lights on"
      unit_of_measurement: "on"
      value_template: "{{expand(state_attr('light.todas_las_luces', 'entity_id'))| selectattr('state','eq','on')|map(attribute='entity_id')|list|count}}"
    count_sockets_on:
      friendly_name: "Total sockets on"
      unit_of_measurement: "on"
      value_template: "{{expand(state_attr('switch.todos_los_enchufes', 'entity_id'))| selectattr('state','eq','on')|map(attribute='entity_id')|list|count}}"
- platform: integration
  source: sensor.consumo_regleta_comedor
  name: super_regleta_energy
  unit_prefix: k
  round: 2
  method: left
